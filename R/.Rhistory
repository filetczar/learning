for(i in rev(1:number)) {
if(i > 1 ){
vessel_qa = vessel
} else {vessel_qa = substr(vessel, 1, length(vessel) -1)}
print(
paste0(
"There were ", i, vessel_qa, " of ", liquid , " on the ", location
)
)
}
}
song_2(number = 10)
vessel = 'bottles'
length(vessel)
substr(vessel,1,'s')
song_2 <- function(vessel = 'bottles', number = 99, liquid = 'beer', location = 'wall'){
for(i in rev(1:number)) {
if(i > 1 ){
vessel_qa = vessel
} else {vessel_qa = substr(vessel, 1, str_length(vessel) -1)}
print(
paste0(
"There were ", i," ", vessel_qa, " of ", liquid , " on the ", location
)
)
}
}
song_2(number = 10)
song_2 <- function(vessel = 'bottles', number = 99, liquid = 'beer', location = 'wall'){
for(i in rev(1:number)) {
if(i > 1 ){
vessel_qa = vessel
} else {vessel_qa = substr(vessel, 1, stringr::str_length(vessel) -1)}
print(
paste0(
"There were ", i," ", vessel_qa, " of ", liquid , " on the ", location
)
)
}
}
song_2(number = 10)
# prelocating output: how does it effect performance
sys.time()
# prelocating output: how does it effect performance
sys.Time()
# prelocating output: how does it effect performance
Sys.time()
x
x <- 10
seq_along(x)
test_lengths <- function(lengths = c(10,100,1000,10000,100000), out_length = 0) {
for(i in seq_along(lengths)) {
x <- 1:lengths[i]
begin <- Sys.time()
output <- vector("integer", out_length)
for (i in seq_along(x)) {
output <- c(output, lengths(x[[i]]))
}
end <- Sys.time()
diff_t <- difftime(end, begin, units='secs')
print('When out length equals ', out_length, ' and x is size ', lengths[i], ' it takes ', diff_t)
}
}
test_lengths()
test_lengths <- function(lengths = c(10,100,1000,10000,100000), out_length = 0) {
for(i in seq_along(lengths)) {
x <- 1:lengths[i]
begin <- Sys.time()
output <- vector("integer", out_length)
for (i in seq_along(x)) {
output <- c(output, lengths(x[[i]]))
}
end <- Sys.time()
diff_t <- difftime(end, begin, units='secs')
print(
paste0('When out length equals ',
out_length, ' and x is size ',
lengths[i], ' it takes ', diff_t)
)
}
}
test_lengths()
test_lengths(out_length = lengths[i])
test_lengths <- function(lengths = c(10,100,1000,10000,100000), out_length = FALSE) {
for(i in seq_along(lengths)) {
x <- 1:lengths[i]
begin <- Sys.time()
if(out_length){
ol = lengths[i]} else {ol == 0}
output <- vector("integer", ol)
for (i in seq_along(x)) {
output <- c(output, lengths(x[[i]]))
}
end <- Sys.time()
diff_t <- difftime(end, begin, units='secs')
print(
paste0('When out length equals ',
out_length, ' and x is size ',
lengths[i], ' it takes ', diff_t)
)
}
}
test_lengths(out_length = lengths[i])
test_lengths()
if(out_length){
ol = lengths[i]} else {ol == 0}
test_lengths <- function(lengths = c(10,100,1000,10000,100000), out_length = FALSE) {
for(i in seq_along(lengths)) {
x <- 1:lengths[i]
begin <- Sys.time()
if(out_length){
ol = lengths[i]} else {ol = 0}
output <- vector("integer", ol)
for (i in seq_along(x)) {
output <- c(output, lengths(x[[i]]))
}
end <- Sys.time()
diff_t <- difftime(end, begin, units='secs')
print(
paste0('When out length equals ',
out_length, ' and x is size ',
lengths[i], ' it takes ', diff_t)
)
}
}
test_lengths()
test_lengths(out_length = TRUE)
w = c(100,1000,10000)
seq_along(w)
w[1]
test_lengths <- function(lengths = c(10,100,1000,10000,100000), out_length = FALSE) {
ol= 0
for(i in seq_along(lengths)) {
x <- 1:lengths[i]
begin <- Sys.time()
if(out_length){
ol = lengths[i]} else {ol = 0}
output <- vector("integer", ol)
for (i in seq_along(x)) {
output <- c(output, lengths(x[[i]]))
}
end <- Sys.time()
diff_t <- difftime(end, begin, units='secs')
print(
paste0('When out length equals ',
ol, ' and x is size ',
lengths[i], ' it takes ', diff_t)
)
}
}
test_lengths(out_length = TRUE)
test_lengths <- function(lengths = c(10,100,1000,10000,100000), out_length = FALSE) {
ol= 0
for(i in seq_along(lengths)) {
x <- 1:lengths[i]
begin <- Sys.time()
if(out_length){
ol = lengths[i]} else {ol = 0}
output <- vector("integer", ol)
for (i in seq_along(x)) {
output <- c(output, x[[i]])
}
end <- Sys.time()
diff_t <- difftime(end, begin, units='secs')
print(
paste0('When out length equals ',
ol, ' and x is size ',
lengths[i], ' it takes ', diff_t)
)
}
}
test_lengths(out_length = TRUE)
test_lengths <- function(size = c(10,100,1000,10000,100000), out_length = FALSE) {
ol= 0
for(i in seq_along(size)) {
x <- 1:size[i]
begin <- Sys.time()
if(out_length){
ol = size[i]} else {ol = 0}
output <- vector("integer", ol)
for (i in seq_along(x)) {
output <- c(output, lengths(x[[i]]))
}
end <- Sys.time()
diff_t <- difftime(end, begin, units='secs')
print(
paste0('When out length equals ',
ol, ' and x is size ',
size[i], ' it takes ', diff_t)
)
}
}
test_lengths(out_length = TRUE)
test_lengths <- function(size = c(10,100,1000,10000,100000), out_length = FALSE) {
ol= 0
for(i in seq_along(size)) {
x <- 1:size[i]
begin <- Sys.time()
if(out_length){
ol = size[i]} else {ol = 0}
output <- vector("integer", ol)
for (i in seq_along(x)) {
output <- c(output, lengths(x[[i]]))
}
end <- Sys.time()
diff_t <- difftime(end, begin, units='secs')
print(
paste0('When out length equals ',
ol, ' and x is size ',
max(x), ' it takes ', diff_t, " secs")
)
}
}
test_lengths(out_length = TRUE)
x
print(names(x)[nm]}
for(nm in names(x)) {
print(names(x)[nm])
}
show_mean <- function(data= iris) {
for(i in seq_along(data)) {
print(
paste0(names(data[[i]]),": ", mean(data[[i]]))
)
}
show_mean <- function(data= iris) {
for(i in seq_along(data)) {
print(
paste0(names(data[[i]]),": ", mean(data[[i]]))
)
}
}
show_mean()
show_mean <- function(data= iris) {
for(i in seq_along(data)) {
print(
paste0(colnames(data[[i]]),": ", mean(data[[i]]))
)
}
}
show_mean()
names(iris)
names(iris[1])
show_mean <- function(data= iris) {
for(i in seq_along(data)) {
print(
paste0(names(data[i]),": ", mean(data[[i]]))
)
}
}
show_mean()
show_mean <- function(data= iris) {
for(i in seq_along(data)) {
if(class(data[[i]]) == 'numeric') {
print(
paste0(names(data[i]),": ", mean(data[[i]]))
)
}
}
}
show_mean()
show_mean <- function(data= iris) {
for(i in seq_along(data)) {
if(class(data[[i]]) == 'numeric') {
print(
paste0(names(data[i]),": ", round(mean(data[[i]]),2))
)
}
}
}
show_mean()
map(iris, mean)
map_dbl(iris, mean)
models <- mtcars %>%
spilt(.$cyl) %>%
map(~lm(mpg ~wt, data = .))
models <- mtcars %>%
purrr::spilt(.$cyl) %>%
purrr::map(~lm(mpg ~wt, data = .))
models <- mtcars %>%
purrr::split(.$cyl) %>%
purrr::map(~lm(mpg ~wt, data = .))
models <- mtcars %>%
split(.$cyl) %>%
purrr::map(~lm(mpg ~wt, data = .))
models %>%
map(summary) %>%
map_dbl(~.$r.squared)
# 21.5.3 Exercises
map_dbl(mtcars,mean)
map_dbl(flights, class)
map(flights, class)
map_lgl(flights, class)
map_int(flights, class)
map(flights, class) %>%
dplyr::bind_rows(.)
map_dbl(iris, unique)
map_dbl(iris, length, unique)
map_dbl(iris, length(unique))
map_dbl(iris, n(unique))
map_dbl(iris, unique)
iris %>%
map(., unique) %>%
map(., length)
iris %>%
map(., unique) %>%
map(., length) %>%
flatten_dbl()
iris %>%
map(., unique) %>%
map(., length) %>%
flatten_df()
map_df(rnorm, mean = c(-10,0,10,100))
df <- data.frame()
map_df(df,rnorm, mean = c(-10,0,10,100))
map_df(df,rnorm, n = 10, mean = c(-10,0,10,100))
rnorm(10,-10)
map(.,rnorm, n = 10, mean = c(-10,0,10,100))
means
map(means,rnorm, n = 10)
map_lgl(mtcars, is.factor)
map_lgl(iris, is.factor)
map(1:5,  runif)
map(-2:2, rnorm, n = 5)
map_dlb(-2:2, rnorm, n =5)
map_dbl(-2:2, rnorm, n =5)
?every()
x = c('a', 1, 50)
every(x, is.character)
every(x)
every(x, class)
every(x, is_charater)
every(x, is_character)
some(x, is_character)
x = list('a', 1, 50)
every(x, is_character)
?tidytext::cast_sparse()
library(tidytext)
install.packages('tidytext')
library(tidytext)
?tidytext::cast_sparse()
?cast_sparse
12*2
24*2
hard <- 118.49*2
daily <- 69.99*8
hard
daily
rm(list=ls())
######################
# Phil Azar
# Learning R
# Topic: Tidy Text
######################
library(tidyverse)
library(tidytext)
library(stringr)
install.packages('janeaustenr')
install.packages("janeaustenr")
library(janeaustenr)
# Jane Austen text mining
original_books <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup()
library(tidyverse)
library(tidytext)
library(stringr)
# Jane Austen text mining
original_books <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup()
original_books
tidy_books <- unnest_tokens(original_books, word, text)
?unnest_tokens
data(stop_words)
stop_words
unqiue(stop_words$lexicon)
unique(stop_words$lexicon)
stop_words %>%
group_by(lexicon) %>%
summarise(words = n())
books_clean <- tidy_books %>%
anti_join(stop_words)
books_clean %>%
count(word, sort=TRUE)
books_clean %>%
count(word, sort=TRUE) %>%
magrittr::extract(.,10,.)
books_clean %>%
count(word, sort=TRUE) %>%
filter(row_number(.) <= 10)
books_clean %>%
count(word, sort=TRUE) %>%
row_number()
books_clean %>%
count(word, sort=TRUE) %>%
filter(n >= 699) %>%
ggplot(.,aes(x=word)) +
geom_bar(stat = identity, aes(y=n))
books_clean %>%
count(word, sort=TRUE) %>%
filter(n >= 699) %>%
ggplot(.,aes(x=word)) +
geom_bar(stat = identity, aes(y=n))
books_clean %>%
count(word, sort=TRUE) %>%
filter(n >= 699)
books_clean %>%
count(word, sort=TRUE) %>%
filter(n >= 699) %>%
ggplot(.,aes(x=word y =n)) +
geom_bar(stat = identity)
books_clean %>%
count(word, sort=TRUE) %>%
filter(n >= 699) %>%
ggplot(.,aes(x=word y =n)) +
geom_bar(stat = "identity")
books_clean %>%
count(word, sort=TRUE) %>%
filter(n >= 699) %>%
ggplot(.,aes(x=word y =n)) +
geom_bar(stat = "identity")
books_clean %>%
count(word, sort=TRUE) %>%
filter(n >= 699) %>%
ggplot(.,aes(x=word y =n)) +
geom_bar()
?geom_bar
books_clean %>%
count(word, sort=TRUE) %>%
filter(n >= 699) %>%
ggplot(.,aes(x=word y =n)) +
geom_bar(position = 'identity')
books_clean %>%
count(word, sort=TRUE) %>%
filter(n >= 699) %>%
ggplot(.,aes(x=word y =n)) +
geom_bar(position = 'identity', stat='count')
books_clean %>%
count(word, sort=TRUE) %>%
filter(n >= 699) %>%
ggplot(.,aes(x=word,y =n)) +
geom_bar(position = 'identity')
books_clean %>%
count(word, sort=TRUE) %>%
filter(n >= 699) %>%
ggplot(.,aes(x=word)) +
geom_bar(position = 'identity')
books_clean %>%
count(word, sort=TRUE) %>%
filter(n >= 699) %>%
ggplot(.,aes(x=word)) +
geom_bar(position = 'identity', aes(y=n))
books_clean %>%
count(word, sort=TRUE) %>%
filter(n >= 699) %>%
ggplot(.,aes(x=word)) +
geom_bar(position = 'identity', stat="count", aes(y=n))
books_clean %>%
count(word, sort=TRUE) %>%
filter(n >= 699) %>%
ggplot(.,aes(x=word)) +
geom_bar(position = 'identity', stat="bin", aes(y=n))
books_clean %>%
count(word, sort=TRUE) %>%
filter(n >= 699) %>%
ggplot(.,aes(x=word, y=n)) +
geom_bar()
books_clean %>%
count(word, sort=TRUE) %>%
filter(n >= 699) %>%
ggplot(.,aes(x=word, y=n)) +
geom_col()
?geom_col()
books_clean %>%
count(word, sort=TRUE) %>%
filter(n >= 699) %>%
ggplot(.,aes(x=word, y=n)) +
geom_col() +
scale_x_discrete(limits=word)
books_clean %>%
count(word, sort=TRUE) %>%
filter(n >= 699) %>%
ggplot(.,aes(x=word, y=n)) +
geom_col()
reorder(word,n)
books_clean %>%
count(word, sort=TRUE) %>%
filter(n >= 699) %>%
ggplot(.,aes(x=reorder(word,n), y=n)) +
geom_col()
books_clean %>%
count(word, sort=TRUE) %>%
filter(n >= 699) %>%
ggplot(.,aes(x=reorder(word,n, decreasing =TRUE), y=n)) +
geom_col()
books_clean %>%
count(word, sort=TRUE) %>%
filter(n >= 699) %>%
ggplot(.,aes(x=reorder(word,n, decreasing =FALSE), y=n)) +
geom_col()
books_clean %>%
count(word, sort=TRUE) %>%
filter(n >= 699) %>%
ggplot(.,aes(x=reorder(word,-n), y=n)) +
geom_col()
